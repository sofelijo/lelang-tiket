generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wilayah {
  kode  String @id @db.VarChar(13)
  nama  String @db.VarChar(100)
  users User[] @relation("WilayahUsers")

  @@map("wilayah")
}

model User {
  name              String?
  email             String?             @unique
  password          String?
  phoneNumber       String?             @unique
  isVerified        Boolean             @default(false)
  role              Role                @default(USER)
  username          String              @unique
  image             String?
  bio               String?
  namaBank          String?
  rekeningBank      String?
  wilayahId         String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  id                String              @id @default(uuid())
  Aktivitas         Aktivitas[]
  bids              Bid[]
  Comment           Comment[]
  Notifikasi        Notifikasi[]
  OtpLogin          OtpLogin[]
  pembayaran        Pembayaran[]
  RequestKonser     RequestKonser[]
  RequestKonserLike RequestKonserLike[]
  ticketsMenang     Ticket[]            @relation("TicketPemenang")
  tickets           Ticket[]
  wilayah           Wilayah?            @relation("WilayahUsers", fields: [wilayahId], references: [kode])
}

model Konser {
  id             Int              @id @default(autoincrement())
  nama           String
  lokasi         String
  tanggal        DateTime
  venue          String?
  image          String?
  Comment        Comment[]
  konserKategori KonserKategori[]
  tiket          Ticket[]
}

model OtpLogin {
  id        Int      @id @default(autoincrement())
  phone     String
  code      String
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Kategori {
  id             Int              @id @default(autoincrement())
  nama           String
  konserKategori KonserKategori[]
  tickets        Ticket[]         @relation("KategoriToTicket")
}

model Ticket {
  id               Int              @id @default(autoincrement())
  seat             String?
  tipeTempat       String
  harga_awal       Int?
  harga_beli       Int?
  kelipatan        Int?
  batas_waktu      DateTime?
  deskripsi        String?
  perpanjangan_bid PerpanjanganBid?
  konserId         Int
  kategoriId       Int
  jumlah           Int              @default(1)
  statusLelang     StatusLelang     @default(BERLANGSUNG)
  sebelahan        Boolean?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           String?
  pemenangId       String?
  bids             Bid[]
  Comment          Comment[]
  pembayaran       Pembayaran[]
  kategori         Kategori         @relation("KategoriToTicket", fields: [kategoriId], references: [id])
  konser           Konser           @relation(fields: [konserId], references: [id])
  pemenang         User?            @relation("TicketPemenang", fields: [pemenangId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             User?            @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Bid {
  id        Int      @id @default(autoincrement())
  amount    Int
  ticketId  Int
  createdAt DateTime @default(now())
  userId    String?
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Pembayaran {
  ticketId                 Int
  jumlahTotal              Int
  kodeUnik                 Int?
  feePlatform              Int
  statusPembayaran         StatusPembayaran @default(PENDING)
  tanggalTransferKePenjual DateTime?
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  buktiPembayaran          String?
  qrisExpiredAt            DateTime?
  order_id                 String?
  feeMetode                Int?
  snapMethod               String?
  currentStep              Int              @default(1)
  snapToken                String?
  feeMetodeFlat            Int?
  hargaTiket               Int?
  sudahDipakai             Boolean          @default(false)
  id                       String           @id @default(uuid())
  buyerId                  String?
  buyer                    User?            @relation(fields: [buyerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  ticket                   Ticket           @relation(fields: [ticketId], references: [id])
}

model KonserKategori {
  id         Int      @id @default(autoincrement())
  konserId   Int
  kategoriId Int
  kategori   Kategori @relation(fields: [kategoriId], references: [id])
  konser     Konser   @relation(fields: [konserId], references: [id])

  @@unique([konserId, kategoriId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  konserId  Int?
  ticketId  Int?
  userId    String?
  konser    Konser?  @relation(fields: [konserId], references: [id])
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MetodePembayaranManual {
  id        Int      @id @default(autoincrement())
  rekening  String?
  deskripsi String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  nama      String
}

model Notifikasi {
  id        String   @id @default(cuid())
  pesan     String
  link      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Banner {
  id        Int       @id @default(autoincrement())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean   @default(true)
  urutan    Int       @default(0)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Aktivitas {
  id        Int      @id @default(autoincrement())
  aksi      String
  detail    String
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WebhookLog {
  id        Int      @id @default(autoincrement())
  payload   Json
  createdAt DateTime @default(now())
}

model RequestKonser {
  id          Int                 @id @default(autoincrement())
  nama        String
  lokasi      String
  tanggal     DateTime?
  venue       String?
  deskripsi   String?
  image       String?
  kategoriIds Int[]
  status      RequestStatus       @default(PENDING)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  userId      String?
  user        User?               @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  likes       RequestKonserLike[]
}

model RequestKonserLike {
  id              Int           @id @default(autoincrement())
  requestKonserId Int
  createdAt       DateTime      @default(now())
  userId          String?
  requestKonser   RequestKonser @relation(fields: [requestKonserId], references: [id])
  user            User?         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum StatusLelang {
  PENDING
  BERLANGSUNG
  SELESAI
  BOOKED
}

enum PerpanjanganBid {
  TANPA
  DUA_HARI
  SATU_HARI
}

enum Role {
  USER
  ADMIN
}

enum StatusPembayaran {
  PENDING
  DIPROSES
  BERHASIL
  GAGAL
  REFUND
}

enum MetodePembayaran {
  TRANSFER
  QRIS_DINAMIS
  MIDTRANS
}

enum RequestStatus {
  PENDING
  DITOLAK
  DITERIMA
}
