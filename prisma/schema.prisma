generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Wilayah {
  kode  String @id @db.VarChar(10)
  nama  String @db.VarChar(100)
  users User[]

  @@map("wilayah")
}

model Konser {
  id      Int      @id @default(autoincrement())
  nama    String
  lokasi  String
  tanggal DateTime

  tiket          Ticket[]
  konserKategori KonserKategori[]
  Comment        Comment[]
}

model Kategori {
  id   Int    @id @default(autoincrement())
  nama String

  tickets        Ticket[]         @relation("KategoriToTicket")
  konserKategori KonserKategori[]
}

model Ticket {
  id               Int              @id @default(autoincrement())
  seat             String?
  tipeTempat       String
  harga_awal       Int
  harga_beli       Int?
  kelipatan        Int?
  batas_waktu      DateTime
  deskripsi        String?
  perpanjangan_bid PerpanjanganBid?
  user             User?             @relation(fields: [userId], references: [id])
  userId           Int?
  konser           Konser            @relation(fields: [konserId], references: [id])
  konserId         Int
  kategori         Kategori          @relation("KategoriToTicket", fields: [kategoriId], references: [id])
  kategoriId       Int
  jumlah           Int               @default(1)
  statusLelang     StatusLelang      @default(BERLANGSUNG)
  bids             Bid[]
  pembayaran       Pembayaran[]

  pemenangId Int?
  pemenang   User? @relation("TicketPemenang", fields: [pemenangId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Comment   Comment[]
}

model Bid {
  id       Int    @id @default(autoincrement())
  amount   Int
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  ticketId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
}

model Pembayaran {
  id               Int               @id @default(autoincrement())
  ticketId         Int
  ticket           Ticket             @relation(fields: [ticketId], references: [id])

  buyerId          Int
  buyer            User               @relation(fields: [buyerId], references: [id])

  metodePembayaran MetodePembayaran
  jumlahTotal      Int                // Harga + kode unik
  kodeUnik         Int
  feePlatform      Int
  buktiPembayaran  String?             // Upload bukti pembayaran
  statusPembayaran StatusPembayaran   @default(PENDING)

  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

model User {
  id          Int     @id @default(autoincrement())
  name        String?
  email       String? @unique
  password    String?
  phoneNumber String? @unique // ← dipakai juga sebagai nomor WhatsApp
  isVerified  Boolean @default(false)
  role        Role    @default(USER)
  username    String  @unique
  image       String?
  bio         String?
  namaBank    String?
  rekeningBank String? // ← Rekening Bank untuk transfer hasil jual

  wilayahId String?
  wilayah   Wilayah? @relation(fields: [wilayahId], references: [kode])

  bids          Bid[]
  tickets       Ticket[]
  ticketsMenang Ticket[] @relation("TicketPemenang")
  pembayaran    Pembayaran[]
  Comment       Comment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model KonserKategori {
  id Int @id @default(autoincrement())

  konserId Int
  konser   Konser @relation(fields: [konserId], references: [id])

  kategoriId Int
  kategori   Kategori @relation(fields: [kategoriId], references: [id])

  @@unique([konserId, kategoriId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  user      User   @relation(fields: [userId], references: [id])
  userId    Int

  konser    Konser? @relation(fields: [konserId], references: [id])
  konserId  Int?

  ticket    Ticket? @relation(fields: [ticketId], references: [id])
  ticketId  Int?
}

enum StatusLelang {
  PENDING
  BERLANGSUNG
  SELESAI
}

enum PerpanjanganBid {
  TANPA
  DUA_HARI
  SATU_HARI
}

enum Role {
  USER
  ADMIN
}

enum StatusPembayaran {
  PENDING
  DIPROSES
  BERHASIL
  GAGAL
  REFUND
}

enum MetodePembayaran {
  TRANSFER
  QRIS
}




// model Ticket {
//   id          Int      @id @default(autoincrement())
//   seat        String
//   tipeTempat  String
//   harga_awal  Int
//   batas_waktu DateTime
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now()) @updatedAt

//   konserId Int
//   konser   Konser @relation(fields: [konserId], references: [id])

//   kategoriId Int
//   kategori   Kategori @relation("KategoriToTicket", fields: [kategoriId], references: [id])
//   bids       Bid[]
//   user       User     @relation(fields: [userId], references: [id])
//   userId     Int

// }
// model Ticket {
//   id               Int              @id @default(autoincrement())
//   seat             String? // Bisa null jika bukan 'duduk'
//   tipeTempat       String
//   harga_awal       Int
//   harga_beli       Int?
//   kelipatan        Int?
//   batas_waktu      DateTime
//   deskripsi        String?
//   perpanjangan_bid PerpanjanganBid? // ENUM baru
//   user             User?            @relation(fields: [userId], references: [id])
//   userId           Int?
//   konser           Konser           @relation(fields: [konserId], references: [id])
//   konserId         Int
//   kategori         Kategori         @relation("KategoriToTicket", fields: [kategoriId], references: [id])
//   kategoriId       Int
//   jumlah           Int              @default(1) // jumlah tiket yang dijual
//   statusLelang     StatusLelang     @default(BERLANGSUNG) // enum status
//   bids             Bid[]

//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   Comment   Comment[]
// }
